<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>一张图澄清架构设计模式</title>
      <link href="/2019/06/01/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%BE%84%E6%B8%85%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/06/01/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%BE%84%E6%B8%85%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><img src="/2019/06/01/一张图澄清架构设计模式/%E4%B8%80%E5%BC%A0%E5%9B%BE%E6%BE%84%E6%B8%85%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.svg" alt="一张图澄清架构设计模式"></p>]]></content>
      
      
      <categories>
          
          <category> 设计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 架构模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>调用模型</title>
      <link href="/2018/08/30/%E8%B0%83%E7%94%A8%E6%A8%A1%E5%9E%8B/"/>
      <url>/2018/08/30/%E8%B0%83%E7%94%A8%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>提示: 本文是<a href="http://houqian.xyz/2018/08/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/#%E7%AE%97%E6%B3%95%E4%BE%A7">模型部署方案</a>的一部分</p><h1 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h1><ul><li>java8</li><li>pmml-evaluator 1.4.2</li><li>pmml-evaluator-extension 1.4.2</li></ul><h1 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h1><ol><li><p>使用JPMML执行引擎反序列化pmml文件</p></li><li><p>模型校验（此处具体校验的问题，笔者以后另开一篇）</p></li></ol><a id="more"></a><h1 id="我们开始吧"><a class="header-anchor" href="#我们开始吧"></a>我们开始吧</h1><p>maven依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pmml-evaluator.version</span>&gt;</span>1.4.2<span class="tag">&lt;/<span class="name">pmml-evaluator.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--运行模型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jpmml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pmml-evaluator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pmml-evaluator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jpmml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pmml-evaluator-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pmml-evaluator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="一网打尽"><a class="header-anchor" href="#一网打尽"></a>一网打尽</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.houqian.jpmml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jpmml.evaluator.*;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.JAXBException;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : houqian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> : 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> : 2018-08-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Execute</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JAXBException, SAXException, IOException </span>&#123;</span><br><span class="line">    <span class="comment">// 从pmml文件实例化模型执行引擎</span></span><br><span class="line">    Evaluator evaluator = <span class="keyword">new</span> LoadingModelEvaluatorBuilder()</span><br><span class="line">            .setLocatable(<span class="keyword">false</span>)</span><br><span class="line">            .setVisitors(<span class="keyword">new</span> DefaultVisitorBattery())</span><br><span class="line">            <span class="comment">//.setOutputFilter(OutputFilters.KEEP_FINAL_RESULTS)</span></span><br><span class="line">            .load(<span class="keyword">new</span> File(<span class="string">"src/main/resources/pipeline.pmml.xml"</span>))</span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 校验模型合法性</span></span><br><span class="line">    evaluator.verify();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入变量</span></span><br><span class="line">    List&lt;? extends InputField&gt; inputFields = evaluator.getInputFields();</span><br><span class="line">    System.out.println(<span class="string">"Input fields: "</span> + inputFields);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 标签</span></span><br><span class="line">    List&lt;? extends TargetField&gt; targetFields = evaluator.getTargetFields();</span><br><span class="line">    System.out.println(<span class="string">"Target field(s): "</span> + targetFields);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出变量</span></span><br><span class="line">    List&lt;? extends OutputField&gt; outputFields = evaluator.getOutputFields();</span><br><span class="line">    System.out.println(<span class="string">"Output fields: "</span> + outputFields);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放引用，优化GC</span></span><br><span class="line">    evaluator = <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>加载模型文件</title>
      <link href="/2018/08/30/%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B%E6%96%87%E4%BB%B6/"/>
      <url>/2018/08/30/%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>提示: 本文是<a href="http://houqian.xyz/2018/08/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/#%E7%AE%97%E6%B3%95%E4%BE%A7">模型部署方案</a>的一部分</p><h1 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h1><ul><li>java8</li><li>pmml-model 1.4.2</li></ul><h1 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h1><ol><li>加载反序列化模型文件为PMML对象</li><li>优化模型，并写到新模型文件</li></ol><a id="more"></a><h1 id="我们开始吧"><a class="header-anchor" href="#我们开始吧"></a>我们开始吧</h1><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pmml-model.version</span>&gt;</span>1.4.2<span class="tag">&lt;/<span class="name">pmml-model.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--pmml模型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jpmml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pmml-model<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pmml-model.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="加载模型-更新模型"><a class="header-anchor" href="#加载模型-更新模型"></a>加载模型 &amp; 更新模型</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.houqian.jpmml;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> org.dmg.pmml.PMML;</span><br><span class="line"><span class="keyword">import</span> org.jpmml.model.PMMLUtil;</span><br><span class="line"><span class="keyword">import</span> org.jpmml.model.visitors.LocatorNullifier;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.bind.JAXBException;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> : houqian</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> : 1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> : 2018-08-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Load</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> FileNotFoundException, JAXBException, SAXException, JsonProcessingException </span>&#123;</span><br><span class="line">    <span class="comment">// 这里的pmml是之前sklearn、sparkml导出的文件，任选其一即可</span></span><br><span class="line">    FileInputStream srcModelIs = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"src/main/resources/pipeline.pmml.xml"</span>));</span><br><span class="line">    PMML pmml = PMMLUtil.unmarshal(srcModelIs);</span><br><span class="line"></span><br><span class="line">    optimize(pmml);</span><br><span class="line"></span><br><span class="line">    FileOutputStream newModelOs = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"src/main/resources/new-pipeline.pmml.xml"</span>));</span><br><span class="line">    store(pmml, newModelOs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">optimize</span><span class="params">(PMML pmml)</span></span>&#123;</span><br><span class="line">    LocatorNullifier nullifier = <span class="keyword">new</span> LocatorNullifier();</span><br><span class="line">    nullifier.applyTo(pmml);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(PMML pmml, OutputStream os)</span> <span class="keyword">throws</span> JAXBException </span>&#123;</span><br><span class="line">    org.jpmml.model.PMMLUtil.marshal(pmml, os);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>笔者没有找到如何验证以上操作和模型正确性的关系，现在姑且先让它这样不报错跑通吧。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">➜  src git:(master) ✗ tree -L 3 </span><br><span class="line">.</span><br><span class="line">├── main</span><br><span class="line">│   ├── java</span><br><span class="line">│   │   ├── com</span><br><span class="line">│   │   └── org</span><br><span class="line">│   └── resources</span><br><span class="line">│       ├── application.properties</span><br><span class="line">│       ├── application.yml</span><br><span class="line">│       ├── import.sql</span><br><span class="line">│       ├── kafka</span><br><span class="line">│       ├── new-pipeline.pmml.xml   &lt;--生成的新模型文件</span><br><span class="line">│       └── pipeline.pmml.xml       &lt;--之前sklearn输出的模型文件</span><br><span class="line">└── test</span><br><span class="line">    └── java</span><br><span class="line">        └── org</span><br><span class="line"></span><br><span class="line">9 directories, 5 files</span><br></pre></td></tr></table></figure><h1 id="参考"><a class="header-anchor" href="#参考"></a>参考</h1><ol><li><a href="https://github.com/jpmml/jpmml-model" target="_blank" rel="noopener">https://github.com/jpmml/jpmml-model</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sparkml导出jpmml</title>
      <link href="/2018/08/30/sparkml%E5%AF%BC%E5%87%BAjpmml/"/>
      <url>/2018/08/30/sparkml%E5%AF%BC%E5%87%BAjpmml/</url>
      
        <content type="html"><![CDATA[<p>提示: 本文是<a href="http://houqian.xyz/2018/08/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/#%E7%AE%97%E6%B3%95%E4%BE%A7">模型部署方案</a>的一部分</p><h1 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h1><ul><li>spark 2.2</li><li>jpmml-sparkml 1.3.8</li><li>scala 2.11</li></ul><h1 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h1><ol><li>使用spark ml训练一个决策树模型</li><li>在控制台验证可以输出后，写到文件中</li></ol><a id="more"></a><h1 id="我们开始吧"><a class="header-anchor" href="#我们开始吧"></a>我们开始吧</h1><p>maven依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scala.version</span>&gt;</span>2.11.12<span class="tag">&lt;/<span class="name">scala.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scala.compat.version</span>&gt;</span>2.11<span class="tag">&lt;/<span class="name">scala.compat.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">spark-core.version</span>&gt;</span>2.2.0<span class="tag">&lt;/<span class="name">spark-core.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">jpmml-sparkml.version</span>&gt;</span>1.3.8<span class="tag">&lt;/<span class="name">jpmml-sparkml.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--整合jpmml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jpmml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jpmml-sparkml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jpmml-sparkml.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spark mllib--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-mllib_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--spark--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-core_$&#123;scala.compat.version&#125;<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.spark<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spark-sql_2.11<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spark-core.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="模型训练-输出"><a class="header-anchor" href="#模型训练-输出"></a>模型训练 &amp; 输出</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.houqian.spark.jpmml</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.<span class="type">File</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.classification.<span class="type">DecisionTreeClassifier</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.feature.<span class="type">RFormula</span></span><br><span class="line"><span class="keyword">import</span> org.apache.spark.ml.&#123;<span class="type">Pipeline</span>, <span class="type">PipelineStage</span>&#125;</span><br><span class="line"><span class="keyword">import</span> org.apache.spark.sql.<span class="type">SparkSession</span></span><br><span class="line"><span class="keyword">import</span> org.jpmml.model.<span class="type">JAXBUtil</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @author : houqian</span></span><br><span class="line"><span class="comment">  * @version : 1.0</span></span><br><span class="line"><span class="comment">  * @since : 2018-08-30</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">Pipeline</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> spark = <span class="type">SparkSession</span></span><br><span class="line">      .builder</span><br><span class="line">      .appName(<span class="string">"Pipeline"</span>)</span><br><span class="line">      .master(<span class="string">"local[4]"</span>)</span><br><span class="line">      .getOrCreate()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载训练集</span></span><br><span class="line">    <span class="keyword">val</span> irisData = spark</span><br><span class="line">      .read</span><br><span class="line">      .format(<span class="string">"csv"</span>)</span><br><span class="line">      .option(<span class="string">"header"</span>, <span class="string">"true"</span>)</span><br><span class="line">      .load(<span class="string">"file:///Users/houqian/repo/github/data-notebook/src/main/resources/Iris.csv"</span>)</span><br><span class="line"></span><br><span class="line">    irisData.show()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特征选择</span></span><br><span class="line">    <span class="keyword">val</span> formula = <span class="keyword">new</span> <span class="type">RFormula</span>().setFormula(<span class="string">"Species ~ ."</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置决策树分类器</span></span><br><span class="line">    <span class="keyword">val</span> classifier = <span class="keyword">new</span> <span class="type">DecisionTreeClassifier</span>().setLabelCol(formula.getLabelCol).setFeaturesCol(formula.getFeaturesCol)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 组合pipeline</span></span><br><span class="line">    <span class="keyword">val</span> pipeline = <span class="keyword">new</span> <span class="type">Pipeline</span>().setStages(<span class="type">Array</span>[<span class="type">PipelineStage</span>](formula, classifier))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 训练</span></span><br><span class="line">    <span class="keyword">val</span> pipelineModel = pipeline.fit(irisData)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">import</span> javax.xml.transform.stream.<span class="type">StreamResult</span></span><br><span class="line">    <span class="keyword">import</span> org.jpmml.sparkml.<span class="type">PMMLBuilder</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> schema = irisData.schema</span><br><span class="line">    <span class="keyword">val</span> pmml = <span class="keyword">new</span> <span class="type">PMMLBuilder</span>(schema, pipelineModel).build</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将pmml以流的形式输出到控制台</span></span><br><span class="line">    <span class="type">JAXBUtil</span>.marshalPMML(pmml, <span class="keyword">new</span> <span class="type">StreamResult</span>(<span class="type">System</span>.out))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将pmml写到文件</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">PMMLBuilder</span>(schema, pipelineModel).buildFile(<span class="keyword">new</span> <span class="type">File</span>(<span class="string">"/Users/houqian/repo/github/data-notebook/src/main/resources/pipeline.pmml"</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，控制台输出：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" standalone="yes"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PMML</span> <span class="attr">xmlns</span>=<span class="string">"http://www.dmg.org/PMML-4_3"</span> <span class="attr">xmlns:data</span>=<span class="string">"http://jpmml.org/jpmml-model/InlineTable"</span> <span class="attr">version</span>=<span class="string">"4.3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Application</span> <span class="attr">name</span>=<span class="string">"JPMML-SparkML"</span> <span class="attr">version</span>=<span class="string">"1.5.3"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Timestamp</span>&gt;</span>2018-08-30T14:03:52Z<span class="tag">&lt;/<span class="name">Timestamp</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">DataDictionary</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DataField</span> <span class="attr">name</span>=<span class="string">"Species"</span> <span class="attr">optype</span>=<span class="string">"categorical"</span> <span class="attr">dataType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"versicolor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"virginica"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"setosa"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">DataField</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">DataField</span> <span class="attr">name</span>=<span class="string">"Petal_Width"</span> <span class="attr">optype</span>=<span class="string">"categorical"</span> <span class="attr">dataType</span>=<span class="string">"string"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"0.2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.3"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.5"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"2.3"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.4"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"0.4"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"0.3"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"2.1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"0.1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.9"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.6"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"2.4"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.1"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"2.5"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"2.2"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"1.7"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"0.5"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Value</span> <span class="attr">value</span>=<span class="string">"0.6"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">DataField</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">DataDictionary</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">TreeModel</span> <span class="attr">functionName</span>=<span class="string">"classification"</span> <span class="attr">missingValueStrategy</span>=<span class="string">"nullPrediction"</span> <span class="attr">splitCharacteristic</span>=<span class="string">"multiSplit"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">MiningSchema</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MiningField</span> <span class="attr">name</span>=<span class="string">"Species"</span> <span class="attr">usageType</span>=<span class="string">"target"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MiningField</span> <span class="attr">name</span>=<span class="string">"Petal_Width"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">MiningSchema</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Output</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">OutputField</span> <span class="attr">name</span>=<span class="string">"pmml(prediction)"</span> <span class="attr">optype</span>=<span class="string">"categorical"</span> <span class="attr">dataType</span>=<span class="string">"string"</span> <span class="attr">feature</span>=<span class="string">"predictedValue"</span> <span class="attr">isFinalResult</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">OutputField</span> <span class="attr">name</span>=<span class="string">"prediction"</span> <span class="attr">optype</span>=<span class="string">"categorical"</span> <span class="attr">dataType</span>=<span class="string">"double"</span> <span class="attr">feature</span>=<span class="string">"transformedValue"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">MapValues</span> <span class="attr">outputColumn</span>=<span class="string">"data:output"</span> <span class="attr">dataType</span>=<span class="string">"double"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">FieldColumnPair</span> <span class="attr">field</span>=<span class="string">"pmml(prediction)"</span> <span class="attr">column</span>=<span class="string">"data:input"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">InlineTable</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">data:input</span>&gt;</span>versicolor<span class="tag">&lt;/<span class="name">data:input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">data:output</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data:output</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">data:input</span>&gt;</span>virginica<span class="tag">&lt;/<span class="name">data:input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">data:output</span>&gt;</span>1<span class="tag">&lt;/<span class="name">data:output</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">row</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">data:input</span>&gt;</span>setosa<span class="tag">&lt;/<span class="name">data:input</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">data:output</span>&gt;</span>2<span class="tag">&lt;/<span class="name">data:output</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">row</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">InlineTable</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">MapValues</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">OutputField</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">OutputField</span> <span class="attr">name</span>=<span class="string">"probability(versicolor)"</span> <span class="attr">optype</span>=<span class="string">"continuous"</span> <span class="attr">dataType</span>=<span class="string">"double"</span> <span class="attr">feature</span>=<span class="string">"probability"</span> <span class="attr">value</span>=<span class="string">"versicolor"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">OutputField</span> <span class="attr">name</span>=<span class="string">"probability(virginica)"</span> <span class="attr">optype</span>=<span class="string">"continuous"</span> <span class="attr">dataType</span>=<span class="string">"double"</span> <span class="attr">feature</span>=<span class="string">"probability"</span> <span class="attr">value</span>=<span class="string">"virginica"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">OutputField</span> <span class="attr">name</span>=<span class="string">"probability(setosa)"</span> <span class="attr">optype</span>=<span class="string">"continuous"</span> <span class="attr">dataType</span>=<span class="string">"double"</span> <span class="attr">feature</span>=<span class="string">"probability"</span> <span class="attr">value</span>=<span class="string">"setosa"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">True</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Node</span> <span class="attr">score</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"29"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SimplePredicate</span> <span class="attr">field</span>=<span class="string">"Petal_Width"</span> <span class="attr">operator</span>=<span class="string">"equal"</span> <span class="attr">value</span>=<span class="string">"0.2"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"versicolor"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"virginica"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"29.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Node</span> <span class="attr">score</span>=<span class="string">"versicolor"</span> <span class="attr">recordCount</span>=<span class="string">"13"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SimplePredicate</span> <span class="attr">field</span>=<span class="string">"Petal_Width"</span> <span class="attr">operator</span>=<span class="string">"equal"</span> <span class="attr">value</span>=<span class="string">"1.3"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"versicolor"</span> <span class="attr">recordCount</span>=<span class="string">"13.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"virginica"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Node</span> <span class="attr">score</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SimplePredicate</span> <span class="attr">field</span>=<span class="string">"Petal_Width"</span> <span class="attr">operator</span>=<span class="string">"equal"</span> <span class="attr">value</span>=<span class="string">"0.4"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"versicolor"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"virginica"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"7.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Node</span> <span class="attr">score</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"7"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SimplePredicate</span> <span class="attr">field</span>=<span class="string">"Petal_Width"</span> <span class="attr">operator</span>=<span class="string">"equal"</span> <span class="attr">value</span>=<span class="string">"0.3"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"versicolor"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"virginica"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"7.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Node</span> <span class="attr">score</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SimplePredicate</span> <span class="attr">field</span>=<span class="string">"Petal_Width"</span> <span class="attr">operator</span>=<span class="string">"equal"</span> <span class="attr">value</span>=<span class="string">"0.1"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"versicolor"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"virginica"</span> <span class="attr">recordCount</span>=<span class="string">"0.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"5.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Node</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Node</span> <span class="attr">score</span>=<span class="string">"virginica"</span> <span class="attr">recordCount</span>=<span class="string">"89"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">True</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"versicolor"</span> <span class="attr">recordCount</span>=<span class="string">"37.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"virginica"</span> <span class="attr">recordCount</span>=<span class="string">"50.0"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ScoreDistribution</span> <span class="attr">value</span>=<span class="string">"setosa"</span> <span class="attr">recordCount</span>=<span class="string">"2.0"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Node</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Node</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">TreeModel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PMML</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们成功生成的pmml文件：</p><p><img src="/2018/08/30/sparkml导出jpmml/image-20180830161456730.png" alt="image-20180830161456730.png"></p><h1 id="参考"><a class="header-anchor" href="#参考"></a>参考</h1><ol><li><p><a href="https://openscoring.io/blog/2018/07/09/converting_sparkml_pipeline_pmml/" target="_blank" rel="noopener">https://openscoring.io/blog/2018/07/09/converting_sparkml_pipeline_pmml/</a></p></li><li><p><a href="https://github.com/jpmml/jpmml-sparkml" target="_blank" rel="noopener">https://github.com/jpmml/jpmml-sparkml</a></p></li><li><p>用到的训练集Iris.csv：<a href="https://github.com/jpmml/jpmml-sparkml/blob/1.3.X/src/test/resources/csv/Iris.csv" target="_blank" rel="noopener">https://github.com/jpmml/jpmml-sparkml/blob/1.3.X/src/test/resources/csv/Iris.csv</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>sklearn导出jpmml</title>
      <link href="/2018/08/30/sklearn%E5%AF%BC%E5%87%BAjpmml/"/>
      <url>/2018/08/30/sklearn%E5%AF%BC%E5%87%BAjpmml/</url>
      
        <content type="html"><![CDATA[<p>提示: 本文是<a href="http://houqian.xyz/2018/08/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/#%E7%AE%97%E6%B3%95%E4%BE%A7">模型部署方案</a>的一部分</p><h1 id="依赖"><a class="header-anchor" href="#依赖"></a>依赖</h1><ul><li>Python 2.7, 3.4 or newer.</li><li><a href="https://pypi.python.org/pypi/scikit-learn" target="_blank" rel="noopener"><code>scikit-learn</code></a> 0.16.0 or newer.</li><li><a href="https://pypi.python.org/pypi/sklearn-pandas" target="_blank" rel="noopener"><code>sklearn-pandas</code></a> 0.0.10 or newer.</li><li><a href="https://github.com/jpmml/sklearn2pmml" target="_blank" rel="noopener"><code>sklearn2pmml</code></a> 0.14.0 or newer.</li></ul><h1 id="步骤"><a class="header-anchor" href="#步骤"></a>步骤</h1><ol><li>使用sklearn训练一个模型</li><li>使用sklearn原生API将模型到处为 <code>pickle</code> 格式</li><li>使用 JPMML-SkLearn命令将原始<code>pickle</code> 格式文件转换成JPMML文件</li></ol><a id="more"></a><h1 id="我们开始吧"><a class="header-anchor" href="#我们开始吧"></a>我们开始吧</h1><h2 id="训练模型-导出pickle"><a class="header-anchor" href="#训练模型-导出pickle"></a>训练模型 &amp; 导出pickle</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0. 使用pandas加载iris数据集</span></span><br><span class="line">df = pandas.read_csv(<span class="string">"file:./csv/Iris.csv"</span>)</span><br><span class="line"></span><br><span class="line">iris_X = df[df.columns.difference([<span class="string">"Species"</span>])]</span><br><span class="line">iris_y = df[<span class="string">"Species"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 创建一个sklearn_pandas.DataFrameMapper对象，它主要提供面向列的特征工程、标准化功能</span></span><br><span class="line"><span class="keyword">from</span> sklearn_pandas <span class="keyword">import</span> DataFrameMapper</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn2pmml.decoration <span class="keyword">import</span> ContinuousDomain</span><br><span class="line"></span><br><span class="line">column_preprocessor = DataFrameMapper([</span><br><span class="line">    ([<span class="string">"Sepal.Length"</span>, <span class="string">"Sepal.Width"</span>, <span class="string">"Petal.Length"</span>, <span class="string">"Petal.Width"</span>], [ContinuousDomain(), StandardScaler()])</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 创建一个Transformer和Selector对象，它主要提供面向表的特征工程、标准化功能</span></span><br><span class="line"><span class="keyword">from</span> sklearn.decomposition <span class="keyword">import</span> PCA</span><br><span class="line"><span class="keyword">from</span> sklearn.feature_selection <span class="keyword">import</span> SelectKBest</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn2pmml <span class="keyword">import</span> SelectorProxy</span><br><span class="line"></span><br><span class="line">table_preprocessor = Pipeline([</span><br><span class="line">(<span class="string">"pca"</span>, PCA(n_components = <span class="number">3</span>)),</span><br><span class="line">(<span class="string">"selector"</span>, SelectorProxy(SelectKBest(k = <span class="number">2</span>)))</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 创建一个Estimator对象</span></span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeClassifier</span><br><span class="line"></span><br><span class="line">classifier = DecisionTreeClassifier(min_samples_leaf = <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将上面的对象作为参数与sklearn2pmml.pipeline.PMMLPipeline对象组合起来，此时可以运行一下，看看能不能跑通</span></span><br><span class="line"><span class="keyword">from</span> sklearn2pmml.pipeline <span class="keyword">import</span> PMMLPipeline</span><br><span class="line"></span><br><span class="line">pipeline = PMMLPipeline([</span><br><span class="line">    (<span class="string">"columns"</span>, column_preprocessor),</span><br><span class="line">    (<span class="string">"table"</span>, table_preprocessor),</span><br><span class="line">    (<span class="string">"classifier"</span>, classifier)</span><br><span class="line">])</span><br><span class="line">pipeline.fit(iris_X, iris_y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 内置的模型验证功能</span></span><br><span class="line">pipeline.verify(iris_X.sample(n = <span class="number">15</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将拟合好的PMMLPipeline对象，用joblib导出为pickle格式的文件</span></span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line">joblib.dump(pipeline, <span class="string">"pipeline.pkl.z"</span>, compress = <span class="number">9</span>)</span><br></pre></td></tr></table></figure><p>此时，我们得到了原始模型文件</p><p><img src="/2018/08/30/sklearn导出jpmml/image-20180830134051087.png" alt="image-20180830134051087.png"></p><h2 id="转换jpmml"><a class="header-anchor" href="#转换jpmml"></a>转换JPMML</h2><p>我们需要jpmml-sklearn的帮助，来转换原始模型文件。目前该子项目的最新版本为1.5.4，我们可以下载编译好的jar包，或者自己编译。</p><p><img src="/2018/08/30/sklearn导出jpmml/image-20180830134831357.png" alt="image-20180830134831357.png"></p><p>这里笔者选择自行编译：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https:<span class="comment">//github.com/jpmml/jpmml-sklearn.git</span></span><br><span class="line">cd jpmml-sklearn &amp;&amp; mvn clean install -DskipTests</span><br></pre></td></tr></table></figure><p>讲我们上面得到的原始文件拷贝到jpmml-sklearn目录下, 执行:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar target/jpmml-sklearn-executable-<span class="number">1.5</span>-SNAPSHOT.jar --pkl-input pipeline.pkl.z --pmml-output pipeline.pmml</span><br></pre></td></tr></table></figure><p>我们成功的得到了pmml模型文件</p><p><img src="/2018/08/30/sklearn导出jpmml/image-20180830135636503.png" alt="image-20180830135636503.png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>机器学习模型部署方案</title>
      <link href="/2018/08/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/"/>
      <url>/2018/08/29/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a class="header-anchor" href="#背景"></a>背景</h1><p>目前，我们组反欺诈业务已经进行到了较为后期的阶段，初步有了基础的数据平台、计算平台。此时，算法同事也升级了过往基于统计分布的简单算法实现，而采用了更为强大的机器学习模型，目前已知的将会使用以下几类算法：离群点检测算法、树类算法等（笔者仅了解常见算法，描述不准确还望见谅。）</p><h1 id="问题"><a class="header-anchor" href="#问题"></a>问题</h1><p>算法同学日常使用sk-learn或者spark ml居多，其中前者使用python后者使用scala作为日常开发语言。笔者目前所做的属于算法工程化，需要对接线上实时数据流、离线数据实现对算法同学产出的模型的上线。</p><p>目前，已知的其他团队的方案有：</p><ol><li>使用python语言实现backend，并对接实时、离线数据</li><li>使用Java重新实现一遍算法逻辑，然后实现web api，并对接实时、离线数据</li></ol><p>分析一下这两种方案：</p><p>对于1，他们这么做的理由是算法同学自己的工程能力非常强，可以自己用python一站式搞定模型训练、上线，并且他们的业务离线居多，对实时性的要求不高。</p><p>对于2，他们这么做的理由是算法同学工程能力较弱，自己无法搞定一站式。使用线性模型比较多，后端Java同学实现起来还是比较简单的，性能也非常好。</p><p>然而，这两种方案目前看来都不能满足我们组的需求。</p><ul><li>我们的模型比较复杂，用Java实现一遍显的复杂性不可控，验证实现正确性的成本也很高。</li><li>主要是实时、数据量较少的场景，对实时性要求比较高（查询四五个数据源，加上模型逻辑，需要在1秒内给业务方返回）</li><li>希望做到模型的部署和训练接耦，算法同学和后端同学各自专注自己的事情</li></ul><a id="more"></a><h1 id="方案"><a class="header-anchor" href="#方案"></a>方案</h1><p>针对如上特征，笔者进行了调查。发现使用<code>模型训练</code>—&gt;<code>导出模型文件</code>—&gt;<code>服务端加载模型文件，对接数据源</code>这种模式比较适合我们。</p><p>目前业界使用的比较多的模型文件标准是PMML，以下是对该标准的简单描述：</p><blockquote><p>PMML 是一种事实标准语言，用于呈现数据挖掘模型。PMML 允许您在不同的应用程序之间轻松共享预测分析模型。因此，您可以在一个系统中定型一个模型，在 PMML 中对其进行表达，然后将其移动到另一个系统中。</p><p>PMML 是数据挖掘群组的产物，该群组是一个由供应商领导的委员会，由各种商业和开放源码分析公司组成。因此，现在的大部分领先数据挖掘工具都可以导出或导入 PMML。作为一个已发展 10 多年的成熟标准，PMML 既可以呈现用于从数据中了解模型的统计技术（如人工神经网络和决策树），也可以呈现原始输入数据的预处理以及模型输出的后处理。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><p>可以看到，PMML作为一个10几年的标准，在数据挖掘领域是很成熟的。笔者在Github也找到了该标准的Java实现<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>。</p><p><img src="/2018/08/29/机器学习模型部署方案/image-20180829123430675.png" alt="image-20180829123430675.png"></p><p>可以看到其子项目分类非常清晰：</p><ul><li><p>jpmml-evaluatorjava加载jpmml格式文件API，这个也是我们服务端重点关注的</p></li><li><p>jpmml-modeljpmml文件对应的Java类</p></li><li><p>jpmml-sparkml与sparkml整合以导出jpmml文件</p></li><li><p>jpmml-sklearn</p><p>与sklearn整合以导出jpmml文件</p></li><li><p>jpmml-r</p></li><li><p>jpmml-xgboost</p></li></ul><p>如果使用这种方案，改动量：</p><ul><li>算法同学需要整合jpmml-sparkml、jpmml-sklearn</li><li>后端工程同学需要整合jpmml-evaluator、jpmml-model</li></ul><p>改动量还是比较大的，目前也主要是笔者自己进行相关的调研，接下来笔者尝试跑通<code>模型训练</code>—&gt;<code>导出模型文件</code>—&gt;<code>服务端加载模型文件，对接数据源</code>这个流程。</p><h1 id="实现"><a class="header-anchor" href="#实现"></a>实现</h1><h2 id="算法侧"><a class="header-anchor" href="#算法侧"></a>算法侧</h2><p><a href="http://houqian.xyz/2018/08/30/sklearn%E5%AF%BC%E5%87%BAjpmml/">sklearn导出jpmml</a></p><p><a href="http://houqian.xyz/2018/08/30/sklearn%E5%AF%BC%E5%87%BAjpmml/">sparkml导出jpmml</a></p><h2 id="工程侧"><a class="header-anchor" href="#工程侧"></a>工程侧</h2><p><a href="http://houqian.xyz/2018/08/30/%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B%E6%96%87%E4%BB%B6">加载模型文件</a></p><p><a href="http://houqian.xyz/2018/08/30/%E8%B0%83%E7%94%A8%E6%A8%A1%E5%9E%8B">调用模型</a></p><h1 id="总结"><a class="header-anchor" href="#总结"></a>总结</h1><h2 id="该方案的优势"><a class="header-anchor" href="#该方案的优势"></a>该方案的优势</h2><ul><li>解耦使用PMML作为中间层，解耦了模型训练、部署这两个环节，使得算法同学专注效果、后端同学专注性能</li><li>成熟度很高已经有10几年的历史</li></ul><h2 id="该方案的缺点"><a class="header-anchor" href="#该方案的缺点"></a>该方案的缺点</h2><ul><li><p>故障追踪相对困难</p><p>增加了一层模型文件，引入了几个子项目，出了问题定位起来相对以前要难上一些。不过，如果满足我们的需求，相信随着对源码的逐步掌握，我们可以在关键节点做埋点日志，结合已有的tracing系统，这个问题也不大</p></li></ul><h2 id="心得"><a class="header-anchor" href="#心得"></a>心得</h2><p>这次总共花了1天多的时间研究更好的模型上线方案，初步确定了JPMML这一生成中间文件的方案。目前，已经跑通了从算法模型训练（覆盖sklearn、spark ml的jpmml文件输出）到使用jpmml模型文件部署的整个流程。</p><p>过程中还算比较顺利，github上的文档虽少但足够精炼，已经覆盖了主要流程。但并没有覆盖到算法同学的复杂模型case，因此还需要和算法同学细化使用场景。</p><p>如果该方案最终被采用，笔者会撰写更为深入的源码分析系列文章。</p><p><strong>Reference</strong></p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>何为PMML？<a href="https://www.ibm.com/developerworks/cn/opensource/ind-PMML1/index.html" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/opensource/ind-PMML1/index.html</a> <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p>Jpmml Github <a href="https://github.com/jpmml" target="_blank" rel="noopener">https://github.com/jpmml</a> <a href="#fnref2" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>监控调研</title>
      <link href="/2017/08/29/%E7%9B%91%E6%8E%A7%E8%B0%83%E7%A0%94/"/>
      <url>/2017/08/29/%E7%9B%91%E6%8E%A7%E8%B0%83%E7%A0%94/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a class="header-anchor" href="#背景"></a>背景</h3><p>性能压测后，逐个埋点添加各种StopWatch。</p><p><strong>两个缺点：</strong></p><ol><li>侵入了业务逻辑，降低可读性</li><li>耗时，工作量大</li></ol><p><strong>期望：</strong></p><ol><li>【注解】 基于配置或注解可以精确控制要添加性能监控的method或class</li><li>【指标维度全面】监控指标全面，除了常见的QPS、Req Cost Time，还要有TPS, P90, P95 ,P99等指标</li><li>【可视化】最好有图形化的界面可以实时看到各个method的性能状况</li></ol><a id="more"></a><h3 id="方案调研"><a class="header-anchor" href="#方案调研"></a>方案调研</h3><ol><li>商业OneAPM、NewRelic等基于java agent实现无侵入监控性能指标。</li><li>开源【一站式】open-tracing【定制化】metrics + aop + AMQP中间件 + <a href="https://www.influxdata.com/" target="_blank" rel="noopener">InfluxDB</a> + <a href="https://grafana.com/" target="_blank" rel="noopener">Grafana</a></li></ol><p>分析</p><p>根据目前的需求，需要灵活的定制化监控项，可控的监控数据流，因此原则定制化开源项。</p><h3 id="方案细节"><a class="header-anchor" href="#方案细节"></a>方案细节</h3><ol><li><h4 id="组件调研"><a class="header-anchor" href="#组件调研"></a>组件调研</h4><h5 id="监控指标采集"><a class="header-anchor" href="#监控指标采集"></a>监控指标采集</h5><ul><li><a href="evernote:///view/476088119/s5/95bcac4c-8c7e-4a74-8b86-7a2b7f6a43d9/95bcac4c-8c7e-4a74-8b86-7a2b7f6a43d9/" target="_blank" rel="noopener">Metrics</a></li><li>AOP</li></ul><h5 id="指标数据传输"><a class="header-anchor" href="#指标数据传输"></a>指标数据传输</h5><ul><li>AMQP选型</li></ul><h5 id="指标数据落地"><a class="header-anchor" href="#指标数据落地"></a>指标数据落地</h5><ul><li><p>时间序列数据库</p><p>InfluxDB</p></li></ul><h5 id="指标数据展示"><a class="header-anchor" href="#指标数据展示"></a>指标数据展示</h5><ul><li>Grafana</li></ul></li><li><h4 id="方案打通"><a class="header-anchor" href="#方案打通"></a>方案打通</h4></li><li><h4 id="测试上线"><a class="header-anchor" href="#测试上线"></a>测试上线</h4></li></ol><p><strong>Reference</strong></p><ol><li><a href="http://www.jianshu.com/p/e4f70ddbc287" target="_blank" rel="noopener">Metrics —— JVM上的实时监控类库</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> APM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java性能监控 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Shell编程实战总结</title>
      <link href="/2017/08/25/shell%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/"/>
      <url>/2017/08/25/shell%E7%BC%96%E7%A8%8B%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h4 id="linux显示彩色字体"><a class="header-anchor" href="#linux显示彩色字体"></a>Linux显示彩色字体</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">echo -e "\033[30m 黑色字 \033[0m"</span><br><span class="line">echo -e "\033[31m 红色字 \033[0m"</span><br><span class="line">echo -e "\033[32m 绿色字 \033[0m"</span><br><span class="line">echo -e "\033[33m 黄色字 \033[0m"</span><br><span class="line">echo -e "\033[34m 蓝色字 \033[0m"</span><br><span class="line">echo -e "\033[35m 紫色字 \033[0m"</span><br><span class="line">echo -e "\033[36m 天蓝字 \033[0m"</span><br><span class="line">echo -e "\033[37m 白色字 \033[0m"</span><br><span class="line"> </span><br><span class="line">echo -e "\033[40;37m 黑底白字 \033[0m"</span><br><span class="line">echo -e "\033[41;37m 红底白字 \033[0m"</span><br><span class="line">echo -e "\033[42;37m 绿底白字 \033[0m"</span><br><span class="line">echo -e "\033[43;37m 黄底白字 \033[0m"</span><br><span class="line">echo -e "\033[44;37m 蓝底白字 \033[0m"</span><br><span class="line">echo -e "\033[45;37m 紫底白字 \033[0m"</span><br><span class="line">echo -e "\033[46;37m 天蓝底白字 \033[0m"</span><br><span class="line">echo -e "\033[47;30m 白底黑字 \033[0m"</span><br></pre></td></tr></table></figure><h4 id="隔一秒检查mysql在执行的dml语句"><a class="header-anchor" href="#隔一秒检查mysql在执行的dml语句"></a>隔一秒检查MySQL在执行的DML语句</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">true</span>; <span class="keyword">do</span> </span><br><span class="line">  sudo mysql --default-character-set=utf8 -h <span class="variable">$&#123;hostname&#125;</span> -P 3306  -u<span class="variable">$&#123;username&#125;</span>  -p<span class="variable">$&#123;password&#125;</span> -e <span class="string">"show processlist"</span> | grep Query; </span><br><span class="line">sleep 1; </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="以逗号分隔每一行-取第一列"><a class="header-anchor" href="#以逗号分隔每一行-取第一列"></a>以逗号分隔每一行，取第一列</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk -F, <span class="string">'&#123;print $1&#125;'</span> doufen_uid_name</span><br></pre></td></tr></table></figure><h4 id="批量行首添加字符串"><a class="header-anchor" href="#批量行首添加字符串"></a>批量行首添加字符串</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以后研究下列模式能否实现</span></span><br><span class="line">vim mode下 </span><br><span class="line">:%s/^/del user_item__/g</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="查看jar包内容"><a class="header-anchor" href="#查看jar包内容"></a>查看jar包内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jar -tf xxxx.jar</span><br></pre></td></tr></table></figure><h4 id="统计一个文件的行数"><a class="header-anchor" href="#统计一个文件的行数"></a>统计一个文件的行数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方法1：先用wc -l算出行数，awk取第一个字段</span></span><br><span class="line">wc -l filename | awk <span class="string">'&#123;print $1&#125;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2：巧用END函数和内置变量NR直接输出行数</span></span><br><span class="line"><span class="comment"># NR变量可以输出当前行号，END函数是awk读取完文件之后执行的操作</span></span><br><span class="line">awk <span class="string">'END&#123;pint NR&#125;'</span> filename</span><br></pre></td></tr></table></figure><h4 id="如何获取当前脚本的名称？当前路径文件的名称？"><a class="header-anchor" href="#如何获取当前脚本的名称？当前路径文件的名称？"></a>如何获取当前脚本的名称？当前路径文件的名称？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell script</span></span><br><span class="line">basename <span class="variable">$0</span></span><br></pre></td></tr></table></figure><h4 id="linux下的进程管理"><a class="header-anchor" href="#linux下的进程管理"></a>Linux下的进程管理</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. bg,fg,&amp;,ctrl+c, ctrl+z, jobs</span></span><br><span class="line"><span class="comment"># 查看后台进程任务</span></span><br><span class="line"><span class="built_in">bg</span></span><br><span class="line"><span class="comment"># 将一个后台任务唤醒start并切到前台</span></span><br><span class="line"><span class="built_in">fg</span></span><br><span class="line"><span class="comment"># 将一个任务转为daemon进程在后台运行</span></span><br><span class="line">&amp;</span><br><span class="line"><span class="comment"># 停止当前正在运行的进程</span></span><br><span class="line">ctrl+c</span><br><span class="line"><span class="comment"># 将当前进程放到后天并挂起[stop]</span></span><br><span class="line">ctrl+z</span><br><span class="line"><span class="comment"># 查看当前用户下的所有后台任务</span></span><br><span class="line"><span class="built_in">jobs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 工作流实践</span></span><br><span class="line"><span class="comment"># 1.vim 打开一个log文件</span></span><br><span class="line"><span class="comment"># 2.ctrl + z在后台挂起</span></span><br><span class="line"><span class="comment"># 3.jobs</span></span><br><span class="line"><span class="comment"># 4.fg + 编号唤醒相应的进程</span></span><br></pre></td></tr></table></figure><h4 id="实时的监控网卡流量"><a class="header-anchor" href="#实时的监控网卡流量"></a>实时的监控网卡流量</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptraf</span><br></pre></td></tr></table></figure><p><img src="/2017/08/25/shell编程实战/iptraf01.png" alt="iptraf01"></p><p><img src="/2017/08/25/shell编程实战/iptraf02.png" alt="iptraf02"></p><p><a href="http://www.ttlsa.com/linux-command/ss-replace-netstat/" target="_blank" rel="noopener">网络状态工具SS</a></p><h4 id="取出中括号内的内容"><a class="header-anchor" href="#取出中括号内的内容"></a>取出中括号内的内容</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> 123[321]123 | cut -d <span class="string">"["</span> -f2 | cut -d <span class="string">"]"</span> -f1</span><br><span class="line"></span><br><span class="line">output:</span><br><span class="line">321</span><br><span class="line"></span><br><span class="line"><span class="comment"># cut语法理解：</span></span><br><span class="line">cut -d 会根据指定的分隔符切分字符串（或者从文件中读取），-f&#123;<span class="variable">$num</span>&#125;的num是按照该分隔符分割后取哪一块内容（也就是分割后是一个字符串数组，你可以根据下标获取期望的子串，只不过该数组下标从）</span><br></pre></td></tr></table></figure><h4 id="使用vim去除段落内行尾的空格与tab"><a class="header-anchor" href="#使用vim去除段落内行尾的空格与tab"></a>使用VIM去除段落内行尾的空格与tab</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:%s<span class="comment">#\s\+$##</span></span><br></pre></td></tr></table></figure><h4 id="过滤并高亮"><a class="header-anchor" href="#过滤并高亮"></a>过滤并高亮</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep --color -C30 <span class="string">'RESPONSE'</span> test.log</span><br></pre></td></tr></table></figure><p><img src="/2017/08/25/shell编程实战/%E8%BF%87%E6%BB%A4%E5%B9%B6%E9%AB%98%E4%BA%AE.png" alt="过滤并高亮"></p><h4 id="osx下利用xargs传参"><a class="header-anchor" href="#osx下利用xargs传参"></a>osx下利用xargs传参</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls | grep json |grep -v <span class="string">'('</span> |  xargs -I  % cp % <span class="built_in">test</span>/</span><br><span class="line"><span class="comment"># %%内包起来要执行的命令即可，不需要&#123;&#125;占位符</span></span><br><span class="line"><span class="comment"># 注意：OSX的xargs与Linux不同</span></span><br></pre></td></tr></table></figure><h4 id="查看系统中的内存占用"><a class="header-anchor" href="#查看系统中的内存占用"></a>查看系统中的内存占用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -A --sort -rss -o pid,comm,pmem,rss | less</span><br></pre></td></tr></table></figure><h4 id="查看进程打开的文件句柄数"><a class="header-anchor" href="#查看进程打开的文件句柄数"></a>查看进程打开的文件句柄数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> $(pidof java); <span class="keyword">do</span> <span class="built_in">echo</span> <span class="string">"PID # <span class="variable">$p</span> has <span class="variable">$(lsof -n -a -p $p|wc -l)</span> fd opened."</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure><h4 id="linux根据pid查找执行路径及其他详情"><a class="header-anchor" href="#linux根据pid查找执行路径及其他详情"></a>Linux根据PID查找执行路径及其他详情</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ll /proc/PID</span><br></pre></td></tr></table></figure><p><img src="/2017/08/25/shell编程实战/Linux%E6%A0%B9%E6%8D%AEPID%E6%9F%A5%E6%89%BE%E6%89%A7%E8%A1%8C%E8%B7%AF%E5%BE%84%E5%8F%8A%E5%85%B6%E4%BB%96%E8%AF%A6%E6%83%85.png" alt="Linux根据PID查找执行路径及其他详情"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>看起来简单的通知推送服务，真的简单吗</title>
      <link href="/2016/05/31/%E7%9C%8B%E8%B5%B7%E6%9D%A5%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%9A%E7%9F%A5%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%AE%80%E5%8D%95%E5%90%97/"/>
      <url>/2016/05/31/%E7%9C%8B%E8%B5%B7%E6%9D%A5%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%9A%E7%9F%A5%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1%EF%BC%8C%E7%9C%9F%E7%9A%84%E7%AE%80%E5%8D%95%E5%90%97/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a class="header-anchor" href="#背景"></a>背景</h1><p>目前OneAlert提供短信、邮件、电话、APP四种通知通道，其中前三种的使用量最高(90%以上的用户)，因此靠谱的第三方推送提供商至关重要。经过对各种三方推送服务的公司调研，目前锁定了阿里大鱼<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>、容联云<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>、云片<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>、云之讯<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>、SendCloud<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>，这5家平台提供商。</p><p>首先我们来分析一下接入三方后的通讯模型</p><p><img src="/2016/05/31/看起来简单的通知推送服务，真的简单吗/%E6%8E%A8%E9%80%81%E6%A8%A1%E5%9E%8B.svg" alt="推送模型"></p><blockquote><p>注：配额这里是指三方服务商的发送限制，比如每小时最多每个电话拨打几次</p></blockquote><a id="more"></a><p>我们作为一个服务提供商，必然要确保用户的告警可以准确、准时、不漏的投递给用户，这个问题看起来一目了然，没什么难度，其实不然，我们分析下以上通信模型中的几种情况：</p><h2 id="s1-发送成功"><a class="header-anchor" href="#s1-发送成功"></a>s1:发送成功</h2><p>最好的情况（这里由于无法真正的监控第三方是否真正投递到了用户，不过根据以往的工单经验，丢失的概率很小）</p><h2 id="s2-超出配额"><a class="header-anchor" href="#s2-超出配额"></a>s2:超出配额</h2><h3 id="换个重发"><a class="header-anchor" href="#换个重发"></a>换个重发</h3><p>超出配额，那就换个重发呗？这是下意识的解决思路，我们看看有什么问题：</p><p><img src="/2016/05/31/看起来简单的通知推送服务，真的简单吗/%E8%B6%85%E5%87%BA%E9%85%8D%E9%A2%9D.svg" alt="超出配额"></p><h3 id="独立状态服务"><a class="header-anchor" href="#独立状态服务"></a>独立状态服务</h3><p>很直观的发现，重试的次数有可能会很多，这非常影响推送实时性。马上，我们又会想到可以对每次超出配额的情况进行缓存，提炼一个状态服务，如下：</p><p><img src="/2016/05/31/看起来简单的通知推送服务，真的简单吗/%E8%B6%85%E5%87%BA%E9%85%8D%E9%A2%9D_%E6%8E%A8%E9%80%81%E6%9C%8D%E5%8A%A1%E5%95%86%E9%85%8D%E9%A2%9D%E7%8A%B6%E6%80%81%E6%9C%8D%E5%8A%A1.svg" alt="超出配额_推送服务商配额状态服务"></p><p>问题到此为止，一切美好已经发生… 遗憾的是，该状态服务几乎是不可用的。我们可以进一步思考：</p><p>当第一次配额超出的情况发生时，按照上面的设计，该状态服务会缓存下来；</p><p>当第二次推送来临时，会首先请求状态服务，拿到配额超出的那个服务商，排除掉它，使用其他服务商发送</p><p>当第三次推送来临时，会首先请求状态服务，拿到配额超出的那个服务商，排除掉它，使用其他服务商发送</p><p>…</p><p>当第n次推送…</p><p>此时问题一目了然，某个三方服务商第一次超出配额后就不再被请求了，这显然不是我们要的。如果我们试图及时、恰当的让某超出配额的状态失效掉，问题是我们如何知道什么时间或者哪一次请求时让其失效呢？</p><h3 id="小结"><a class="header-anchor" href="#小结"></a>小结</h3><p>目前看来，针对简单的请求-重试模型是很难解决我们的问题的。</p><h1 id="换个思路"><a class="header-anchor" href="#换个思路"></a>换个思路</h1><p>上面所有的方案每次发送都是无状态的，如果我们对每个时间段每次发送用的哪个服务商记录下来，结合配额限制，这样是不是可以做到避免处罚超出配额的问题呢？</p><p>我们来分析下：</p><p><img src="/2016/05/31/看起来简单的通知推送服务，真的简单吗/%E8%B6%85%E5%87%BA%E9%85%8D%E9%A2%9D_%E8%AE%B0%E5%BD%95%E6%8E%A8%E9%80%81%E7%8A%B6%E6%80%81.svg" alt="超出配额_记录推送状态"></p><p>嗯… 此时貌似已经解决了问题。不过从设计来看，NotifySender职责太多了，既要负责发送消息，又得记录发送状态，不符合单一职责原则。如果将来对三方服务商做增加、下线操作，还要动NotifySender，显然是不合理的。</p><h2 id="小结-v2"><a class="header-anchor" href="#小结-v2"></a>小结</h2><p>通过有状态的发送，解决了配额问题，但NotifySender职责太多，不利于拓展，需要再次设计。</p><h1 id="最后方案"><a class="header-anchor" href="#最后方案"></a>最后方案</h1><p>事实上，我们需要一个这样的服务，它能根据三方服务商目前的配额情况，自动的给我们的消息路由到合适的服务商。</p><blockquote><p>实质上，对于每次发送「计数」这件事，其实可以换一个角度思考，我们只要确保在单位时间内，按照配额作为权重将消息分发给服务商即可，这样也能确保不会触发超出配额异常。</p><p>由于篇幅关系，这里不对轮询算法进行展开讨论，而且本身算法不是重点，此类算法网上一搜一大堆，笔者也不想赘述，重要的是我们对业务场景进行实质分析。</p><p>ok，直接给出结论：加权轮询算法（如果读者有兴趣，可以给我发邮件，我们一起讨论: P）</p></blockquote><p><img src="/2016/05/31/看起来简单的通知推送服务，真的简单吗/%E8%B6%85%E5%87%BA%E9%85%8D%E9%A2%9D_%E5%8A%A0%E6%9D%83%E8%BD%AE%E8%AF%A2%E6%96%B9%E6%A1%88.svg" alt="超出配额_加权轮询方案"></p><p>对调度服务的补充解释：</p><p>我们选择将服务商信息存放在配置中心里，主要考虑了以下几点：</p><ul><li>如果服务商将来由于各种原因维护，我们只需要从配置中心去掉这个服务商即可，NotifySender不需要做任何改动</li><li>如果服务商将来更改了配额，我们只需要在配置中心重新配置一下这个服务商的配额信息即可，NotifySender也不需要做任何改动</li></ul><h1 id="reference"><a class="header-anchor" href="#reference"></a>Reference</h1><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://dayu.aliyun.com" target="_blank" rel="noopener">https://dayu.aliyun.com</a> 阿里大鱼 <a href="#fnref1" class="footnote-backref">↩</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://www.yuntongxun.com/" target="_blank" rel="noopener">https://www.yuntongxun.com/</a> 容联云 <a href="#fnref2" class="footnote-backref">↩</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://www.yunpian.com" target="_blank" rel="noopener">https://www.yunpian.com</a> 云片 <a href="#fnref3" class="footnote-backref">↩</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://www.ucpaas.com" target="_blank" rel="noopener">https://www.ucpaas.com</a> 云之讯 <a href="#fnref4" class="footnote-backref">↩</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://sendcloud.sohu.com/" target="_blank" rel="noopener">https://sendcloud.sohu.com/</a> SendCloud <a href="#fnref5" class="footnote-backref">↩</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 业务场景 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 通知推送 </tag>
            
            <tag> 轮询算法 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java集合源码剖析之核心接口</title>
      <link href="/2015/06/04/Java%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E4%B9%8B%E6%A0%B8%E5%BF%83%E6%8E%A5%E5%8F%A3/"/>
      <url>/2015/06/04/Java%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E4%B9%8B%E6%A0%B8%E5%BF%83%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a class="header-anchor" href="#引言"></a>引言</h1><p>Java集合位于java.util包下，主要分为两大类：字典、线性表。其核心接口如下：</p><p><img src="/2015/06/04/Java集合源码剖析之核心接口/Java%E9%9B%86%E5%90%88%E6%A0%B8%E5%BF%83%E6%8E%A5%E5%8F%A3-9580177.svg" alt="Java集合核心接口"></p><h1 id="线性表类"><a class="header-anchor" href="#线性表类"></a>线性表类</h1><h2 id="iterable"><a class="header-anchor" href="#iterable"></a>Iterable</h2><h3 id="职责"><a class="header-anchor" href="#职责"></a>职责</h3><h3 id="核心方法"><a class="header-anchor" href="#核心方法"></a>核心方法</h3><ul><li>boolean hasNext()如果有更多的元素，则返回true</li><li>E next()返回迭代中的下一个元素。如果已经没有元素会抛出<code>NoSuchElementException</code></li><li>default remove()从底层集合中移除此迭代器返回的最后一个元素(注意，你要删除哪个元素，要先调用<code>next()</code>方法使指针跳过该元素才可以删除)。此方法不可用连续调用。<ul><li>如果该iterator不允许删除元素，抛出<code>UnsupportedOperationException</code></li><li>如果调用<code>remove()</code>前没有调用<code>next()</code>，或者是<code>next()</code>后调用2次<code>remove()</code>，抛出<code>UnsupportedOperationException</code></li></ul></li><li>default void forEachRemaining(Consumer&lt;? super E&gt; action)对每个元素执行action方法<ul><li>如果action==null,抛出<code>NullPointerException</code></li></ul></li></ul><h2 id="collection"><a class="header-anchor" href="#collection"></a>Collection</h2><h3 id="职责-v2"><a class="header-anchor" href="#职责-v2"></a>职责</h3><p>所有的线性表类、接口都继承该接口。有些集合允许重复元素而其他集合则不允许。有些是有序的，有些是无序的。JDK不提供此接口的任何直接实现：它提供了更具体的子接口（如Set和List）的实现。此接口通常用于在需要最大通用性的情况下，传递集合并对其进行操作。</p><p>所有通用Collection实现类（通常通过其子接口间接实现Collection）应提供两个“标准”构造函数：</p><ul><li>无参数构造器，它创建并返回一个空集合</li><li>一个参数类型是Collection的构造器，它接收一个集合，并用这个集合创建一个新的集合（两个集合类型不同，主要是用来进行类型转换 ）</li></ul><p>由每个集合子类来决定自己的同步策略。</p><h3 id="核心方法-v2"><a class="header-anchor" href="#核心方法-v2"></a>核心方法</h3><style>  /*基本样式*/  table {      width: 100%; /*表格宽度*/      max-width: 65em; /*表格最大宽度，避免表格过宽*/      border: 1px solid #dedede; /*表格外边框设置*/      margin: 15px auto; /*外边距*/      border-collapse: collapse; /*使用单一线条的边框*/      empty-cells: show; /*单元格无内容依旧绘制边框*/    overflow:scroll;  }  table th,  table td {    height: 35px; /*统一每一行的默认高度*/    border: 1px solid #dedede; /*内部边框样式*/    padding: 0 10px; /*内边距*/  }  /*表头样式*/  table th {      font-weight: bold; /*加粗*/      text-align: center !important; /*内容居中，加上 !important 避免被 Markdown 样式覆盖*/      background: rgba(158,188,226,0.2); /*背景色*/  }    /*隔行变色*/  table tbody tr:nth-child(2n) {      background: rgba(158,188,226,0.12);   }    /*悬浮变色*/  table tr:hover {      background: #efefef;   }    /*表头不换行*/  table th {      white-space: nowrap; /*表头内容强制在一行显示*/  }    /*首列不换行*/  table td:nth-child(1) {      white-space: nowrap;   }    /*为table外包裹的div设置自动滚动条*/  .table-area {    overflow: auto;}</style><script>  /*为了实现水平滚动条，给table添加一个div标签*/  [].slice.call(document.querySelectorAll('table')).forEach(function(el){    var wrapper = document.createElement('div');    wrapper.className = 'table-area';    el.parentNode.insertBefore(wrapper, el);    el.parentNode.removeChild(el);    wrapper.appendChild(el);})</script><table><thead><tr><th style="text-align:center">返回值类型</th><th style="text-align:left">方法</th><th>职责描述</th><th>异常</th></tr></thead><tbody><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>add(E e)</code></td><td>向集合添加指定的元素，如果该集合因为调用该方法而改变，返回true（如果该集合不允许重复并且已经包含了指定的元素，返回false）</td><td>UnsupportedOperationException- 如果此集合不支持添加操作 <br>ClassCastException - 如果指定元素的类阻止将其添加到此集合中<br> NullPointerException - 如果指定的元素为null且此collection不允许null元素 <br>IllegalArgumentException - 如果元素的某些属性阻止将其添加到此集合中 <br>IllegalStateException - 如果由于插入限制而无法在此时添加元素</td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>addAll(Collection&lt;? extends E&gt; c)</code></td><td>将指定集合中的所有元素添加到此集合中</td><td></td></tr><tr><td style="text-align:center"><code>void</code></td><td style="text-align:left"><code>clear()</code></td><td>从此集合中删除所有元素（可选操作）</td><td></td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>contains(Object o)</code></td><td>如果该集合包含指定的元素，则返回true</td><td></td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>containsAll(Collection&lt;?&gt; c)</code></td><td>如果该集合包含入参集合的所有元素，则返回true</td><td></td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>equals(Object o)</code></td><td>将指定对象与此集合进行比较，相等则返回true，反之，false</td><td></td></tr><tr><td style="text-align:center"><code>int</code></td><td style="text-align:left"><code>hashCode()</code></td><td>返回此集合的哈希码值</td><td></td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>isEmpty()</code></td><td>如果该集合不包含任何元素，则返回true</td><td></td></tr><tr><td style="text-align:center"><code>Iterator&lt;E&gt;</code></td><td style="text-align:left"><code>iterator()</code></td><td>返回该集合的迭代器。（无法保证返回元素的顺序，除非实现类是有序的）</td><td></td></tr><tr><td style="text-align:center"><code>default Stream&lt;E&gt;</code></td><td style="text-align:left"><code>parallelStream()</code></td><td>返回此集合的并行流</td><td></td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>remove(Object o)</code></td><td>从此集合中移除指定元素的单个实例（如果存在则删除成功，返回true，反之，false）</td><td></td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>removeAll(Collection&lt;?&gt; c)</code></td><td>从该集合的元素中删除入参集合的元素</td><td></td></tr><tr><td style="text-align:center"><code>default boolean</code></td><td style="text-align:left"><code>removeIf(Predicate&lt;? super E&gt; filter)</code></td><td>从该集合的元素中删除满足入参Predicate的元素</td><td></td></tr><tr><td style="text-align:center"><code>boolean</code></td><td style="text-align:left"><code>retainAll(Collection&lt;?&gt; c)</code></td><td>仅保留此集合中包含在指定集合中的元素（可选操作）</td><td>UnsupportedOperationException- 如果此集合不支持retainAll操作 <br>ClassCastException- 如果此集合中的一个或多个元素的类型与指定的集合不兼容（可选）<br>NullPointerException- 如果此集合包含一个或多个null元素，并且指定的集合不允许null元素（可选），或者指定的集合为null</td></tr><tr><td style="text-align:center"><code>int</code></td><td style="text-align:left"><code>size()</code></td><td>返回此集合中的元素个数（如果集合内元素个数大于Integer.MAX_VALUE，那么只返回Integer.MAX_VALUE）</td><td></td></tr><tr><td style="text-align:center"><code>default Spliterator&lt;E&gt;</code></td><td style="text-align:left"><code>spliterator()</code></td><td>返回此集合的Spliterator（java1.8新增接口，为了对集合进行并行计算，用于对集合进行分区，在stream中使用很多）</td><td></td></tr><tr><td style="text-align:center"><code>default Stream&lt;E&gt;</code></td><td style="text-align:left"><code>stream()</code></td><td>返回该集合的流</td><td></td></tr><tr><td style="text-align:center"><code>Object[]</code></td><td style="text-align:left"><code>toArray()</code></td><td>将该集合转换成Object数组（如果该实现类是有序的，那么返回的数组顺序与之相同；并且返回的数组是新创建的，该集合不会保留数组引用，因此用户可以放心修改数组）</td><td></td></tr><tr><td style="text-align:center"><code>&lt;T&gt; T[]</code></td><td style="text-align:left"><code>toArray(T[] a)</code></td><td>将该集合转换成入参类型的数组（满足toArray()的承诺。对于传入的数组，如果其长度大于该集合的长度，则对多出的部分填充null值）</td><td></td></tr></tbody></table><h2 id="list"><a class="header-anchor" href="#list"></a>List</h2><h3 id="职责-v3"><a class="header-anchor" href="#职责-v3"></a>职责</h3><h3 id="核心方法-v3"><a class="header-anchor" href="#核心方法-v3"></a>核心方法</h3><h2 id="queue"><a class="header-anchor" href="#queue"></a>Queue</h2><h3 id="职责-v4"><a class="header-anchor" href="#职责-v4"></a>职责</h3><h3 id="核心方法-v4"><a class="header-anchor" href="#核心方法-v4"></a>核心方法</h3><h1 id="字典类"><a class="header-anchor" href="#字典类"></a>字典类</h1><h2 id="map"><a class="header-anchor" href="#map"></a>Map</h2><h3 id="职责-v5"><a class="header-anchor" href="#职责-v5"></a>职责</h3><h3 id="核心方法-v5"><a class="header-anchor" href="#核心方法-v5"></a>核心方法</h3><h2 id="sortedmap"><a class="header-anchor" href="#sortedmap"></a>SortedMap</h2><h3 id="职责-v6"><a class="header-anchor" href="#职责-v6"></a>职责</h3><h3 id="核心方法-v6"><a class="header-anchor" href="#核心方法-v6"></a>核心方法</h3><h2 id="navigablemap"><a class="header-anchor" href="#navigablemap"></a>NavigableMap</h2><h3 id="职责-v7"><a class="header-anchor" href="#职责-v7"></a>职责</h3><h3 id="核心方法-v7"><a class="header-anchor" href="#核心方法-v7"></a>核心方法</h3>]]></content>
      
      
      <categories>
          
          <category> 源码剖析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java集合源码剖析之ArrayList</title>
      <link href="/2015/06/03/Java%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E4%B9%8BArrayList/"/>
      <url>/2015/06/03/Java%E9%9B%86%E5%90%88%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90%E4%B9%8BArrayList/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a class="header-anchor" href="#简介"></a>简介</h1><p>ArrayList属于线性表的一种，底层由数组实现。相对于数组，它具有动态扩容的能力，也可以称其为动态数组。</p><h1 id="继承体系"><a class="header-anchor" href="#继承体系"></a>继承体系</h1><p><img src="/2015/06/03/Java集合源码剖析之ArrayList/ArrayList%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB.svg" alt="ArrayList继承关系"></p><h1 id="collection接口"><a class="header-anchor" href="#collection接口"></a><code>Collection</code>接口</h1><p>该接口是Java集合继承体系的根接口（即所有集合都继承该接口）。集合表示一组对象（或者叫元素）。有些集合允许重复元素而其他集合则不允许。有些是有序的，有些是无序的。而 JDK不提供此接口的任何直接实现：它提供了更具体的子接口（如Set和List）的实现。此接口通常在需要最大通用性的场景中才会使用，在多数情况下建议使用其子接口（比如List，Map等）来获得更多的功能。</p><p>所有通用Collection实现类（通常通过其子接口间接实现<code>Collection</code>）应提供以下两种构造函数：</p><ul><li>无参数构造器，会创建并返回一个空集合</li><li></li></ul><p>实际上，后一个构造函数允许用户复制任何集合，从而生成所需实现类型的等效集合。没有办法强制执行此约定（因为接口不能包含构造函数），但Java平台库中的所有通用Collection实现都符合。如果此集合不支持该操作，则指定此接口中包含的“破坏性”方法（即修改其操作集合的方法）将抛出UnsupportedOperationException。如果是这种情况，如果调用对集合没有影响，则这些方法可能（但不是必须）抛出<code>UnsupportedOperationException</code>。例如，如果要添加的集合为空，则可以（但不是必须）在不可修改的集合上调用addAll（Collection）方法抛出异常。</p><p>某些集合实现对它们可能包含的元素有限制。例如，某些实现禁止null元素，并且一些实现对其元素的类型有限制。尝试添加不合格的元素会引发未经检查的异常，通常是NullPointerException或ClassCastException。尝试查询不合格元素的存在可能会引发异常，或者它可能只是返回false;一些实现将展示前一种行为，一些将展示后者。更一般地，尝试对不合格的元素进行操作，其完成不会导致将不合格的元素插入到集合中，可以在实现的选择中抛出异常或者它可以成功。此类异常在此接口的规范中标记为“可选”。</p><p>由每个集合决定自己的同步策略。在实现没有更强的保证的情况下，未定义的行为可能是由于另一个线程正在变异的集合上的任何方法的调用引起的;这包括直接调用，将集合传递给可能执行调用的方法，以及使用现有迭代器来检查集合。</p><p>Collections Framework接口中的许多方法都是根据equals方法定义的。例如，contains（Object o）方法的规范说：“当且仅当此集合包含至少一个元素e时才返回true（o == null？e == null：o.equals（e）） “。不应将此规范解释为暗示使用非null参数o调用Collection.contains将导致对任何元素e调用o.equals（e）。实现可以自由地实现优化，从而避免等于调用，例如，首先比较两个元素的哈希码。 （Object.hashCode（）规范保证具有不等哈希码的两个对象不能相等。）更一般地，各种集合框架接口的实现可以自由地利用底层Object方法的指定行为，只要实现者认为它是合适的。</p><p>执行集合的递归遍历的某些集合操作可能会失败，而自引用实例的例外情况是集合直接或间接包含自身。这包括clone（），equals（），hashCode（）和toString（）方法。实现可以可选地处理自引用场景，但是大多数当前实现不这样做。</p><p>此接口是Java Collections Framework的成员。</p>]]></content>
      
      
      <categories>
          
          <category> 源码剖析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java集合 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
